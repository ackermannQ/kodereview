{"componentChunkName":"component---src-templates-blog-post-js","path":"/observer-pattern/","result":{"data":{"site":{"siteMetadata":{"title":"codeReview~"}},"markdownRemark":{"id":"b47693dc-d3bd-5453-b6af-05f0d46a58e4","excerpt":"How does it work ? An observer registers with a subject (or observable) which would notify the observer when its state updates. It allows a variety of objects…","html":"<p>How does it work ?<br>\nAn <strong>observer</strong> <em>registers</em> with a <strong>subject</strong> (or <strong>observable</strong>) which would notify the observer when its state updates. It allows a variety of objects to update o</p>\n<h2>Theory - Use case</h2>\n<p>More detail on what I just said above</p>\n<h2>Implementation - Example</h2>\n<h2>To conclude - The key takeaways</h2>\n<h4>Any remarks ?</h4>\n<p>Make a <a href=\"!https://github.com/ackermannQ/quentinackermann\">pull request</a> or open an <a href=\"https://github.com/ackermannQ/quentinackermann/issues\">issue</a>!<br>\nDon’t know how to do it ? Check out this <a href=\"https://opensource.com/article/19/7/create-pull-request-github\">very well explained tutorial</a></p>","frontmatter":{"title":"[Design] - The Observer Pattern","date":"May 05, 2021","description":"I can see you :)"}},"previous":{"fields":{"slug":"/strategy-pattern/"},"frontmatter":{"title":"[Design] - The Strategy Pattern"}},"next":{"fields":{"slug":"/plan-an-iteration/"},"frontmatter":{"title":"[Agile] - How do you plan your iteration?"}}},"pageContext":{"id":"b47693dc-d3bd-5453-b6af-05f0d46a58e4","previousPostId":"9e9cce27-c3f2-5887-8741-71194c577959","nextPostId":"cf85e483-be96-5263-a3bc-eb9fe072222f"}},"staticQueryHashes":["1163679704","25117437"]}